plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}
def generatedResources = new File(project(":common").getProjectDir(), "/src/main/generated")
archivesBaseName = archivesBaseName + "-neoforge"
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    neoForge {
    }
    runs {
        data {
            data()
            name("NeoForge Data Generator")

            programArgs "--all", "--mod", "candycraftce"
            programArgs "--output", generatedResources.absolutePath
            programArgs "--existing", new File(project(":common").getProjectDir(), "/src/main/resources").absolutePath
        }
        client {
            vmArg "-Dmixin.debug.export=true"
            vmArg "-XX:+AllowEnhancedClassRedefinition"
        }
    }
}
configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
//    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
//    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

//    modRuntimeOnly "curse.maven:appleskin-248787:4770828"
//    modRuntimeOnly "curse.maven:jade-324717:4801177"

    //https://www.curseforge.com/minecraft/mc-mods/better-tips-nbt-tag/files
//    modRuntimeOnly("native:BetterTags-1.20.1:1.1")

    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-neoforge-api:${rootProject.jei_version}")
    modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-neoforge:${rootProject.jei_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    atAccessWideners.add "candycraftce.accesswidener"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    //https://github.com/architectury/architectury-api/blob/1.21/neoforge/build.gradle
}
