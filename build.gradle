plugins {
    id 'java'
    id 'dev.architectury.loom' version '1.7-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}
architectury {
    minecraft = minecraft_version
}
ext {
    def vendor = compileJava.javaCompiler.get().metadata.vendor
    use_jbr_feature = (vendor == "JetBrains")
    println "jvm_vendor: $vendor ${use_jbr_feature ? "(use_jbr_feature)" : ""}"
}

String sha = System.getenv("GITHUB_SHA")
String short_sha = sha == null ? null : sha.substring(0, 7);
if (sha != null) println "SHA Got! sha=$sha short=$short_sha"

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version

    repositories {
        flatDir {
            dir rootProject.file("libs")
            content { includeGroup "local" }
        }
        maven { url = "https://modmaven.dev" }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    //declare repositories
    println("=".repeat(64))
    println("here in project ${project.name}")
    println("repo here=>")
    getRepositories().forEach {
        print "\t"
        if (it instanceof UrlArtifactRepository) {
            println it.url
        } else if (it instanceof FlatDirectoryArtifactRepository) {
            println it.dirs
        } else print it
    }
//================================================================//
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base {
        archivesName = "${mod_id}" + "-${project.name}" + "-${minecraft_version}" + "${short_sha == null ? "" : "-${short_sha}"}"
    }
}
subprojects {
    apply plugin: "dev.architectury.loom"
    dependencies {
        minecraft "net.minecraft:minecraft:$minecraft_version"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:${parchment_version}")
        }

    }
    java {
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
    }
}
