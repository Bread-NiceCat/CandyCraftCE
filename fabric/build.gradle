plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}
archivesBaseName = archivesBaseName + "-neoforge"
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        client {
            vmArg "-Dmixin.debug.export=true"
            vmArg "-XX:+AllowEnhancedClassRedefinition"
        }

        //坑爹datagen
//        datagen {
//            inherit client
//            name "Data Generation"
//            vmArg "-Dfabric-api.datagen"
//            vmArg "-Dfabric-api.datagen.output-dir=" + new File(project(":common").getProjectDir(), "/src/main/generated")
//            vmArg "-Dfabric-api.datagen.modid=candycraftce"
//            vmArg "-Dfabric-api.datagen.strict-validation"
//            runDir "build/datagen"
//        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
//    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

//    modRuntimeOnly "curse.maven:appleskin-248787:4770825"
//    modRuntimeOnly "curse.maven:cloth-config-348521:4973440"
//    modRuntimeOnly "curse.maven:jade-324717:4792447"

//    modRuntimeOnly "native:BetterTags-1.20.1-Fabric:1.3"

    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric-api:${rootProject.jei_version}")
    modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric:${rootProject.jei_version}")


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
