plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

def use_jbr_feature = rootProject.ext.use_jbr_feature
loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
    runs {
        client {
            vmArg "-Dmixin.debug.export=true"
            if (use_jbr_feature) {
                vmArg "-XX:+AllowEnhancedClassRedefinition"
            }
        }
    }
}


dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

//    modRuntimeOnly "curse.maven:appleskin-248787:4770825"
//    modRuntimeOnly "curse.maven:cloth-config-348521:4973440"
//    modRuntimeOnly "curse.maven:jade-324717:4792447"

//    modRuntimeOnly "native:BetterTags-1.20.1-Fabric:1.3"

    modCompileOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric-api:${rootProject.jei_version}")
    modRuntimeOnly("mezz.jei:jei-${rootProject.minecraft_version}-fabric:${rootProject.jei_version}")

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
